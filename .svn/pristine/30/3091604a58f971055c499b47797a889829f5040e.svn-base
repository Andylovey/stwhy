<template>
  <el-scrollbar wrapClass="scrollbar-wrapper">
    <el-menu
      class="sidebar-menu"
      mode="vertical"
      :show-timeout="200"
      :default-active="$route.path"
      :collapse="isCollapse"
      :background-color="bg"
      :text-color="tc"
      :active-text-color="atc">
      <sidebar-item :routes="routers"></sidebar-item>
    </el-menu>
  </el-scrollbar>
</template>

<script>
import { mapGetters } from 'vuex'
import sidebarItem from './SidebarItem'


import _import from '@/utils/import'
const Layout = _import('layout/Layout')

// 引入接口
import api from '@/api/api.js'
// 获取token
import { getToken , removeToken } from '@/utils/auth'

export default {
  name: 'Sidebar',
  data() {
    return {
      bg: '#556d84',
      tc: '#fff',
      atc: '#41B883',

      routers : []
    }
  },
  methods : {
    getRouters() {
      this.$http.get(`${api.dev}/p/permission/getAll`,{params : {access_token: getToken}}).then(res => {
        if(res.body.code == 200) {
          res.body.content.forEach(item => {
            if(item.p_level == 1) {
              this.routers.push(
                {
                  path: `/${item.p_page}`,
                  component: Layout,
                  meta: {
                    title: item.p_name,
                    icon: 'eye',
                    p_id: item.p_id,
                    p_page : item.p_page
                  },
                  children: []
                },
              )
            }else if(item.p_level == 2) {
              for(var i = 0 ; i < this.routers.length ; i++) {
                if(this.routers[i].meta.p_id == item.p_fid) {
                  var component;
                  var page;
                  if(item.p_page && this.routers[i].meta.p_page){
                    component = this.routers[i].meta.p_page + "/" + item.p_page;
                    page = item.p_page;
                  } else {
                    component = 'errorPage/404';
                    page = 'errorPage/404';
                  }
                  this.routers[i].children.push({
                      path: page,
                      component: _import(component),
                      name: page,
                      meta: {
                        title: item.p_name,
                        icon: 'friendlink',
                        p_id: item.p_id
                      }
                  })
                }
              }
            }
          })
        }
      })
    }
  },
  created() {
    this.getRouters();
  },
  components: {
    sidebarItem
  },
  computed: {
    ...mapGetters(['sidebar', 'permission_routers']),
    isCollapse() {
      if (this.sidebar.sliderState === 'full') {
        return false
      }
      return true
    }
  }
}
</script>
