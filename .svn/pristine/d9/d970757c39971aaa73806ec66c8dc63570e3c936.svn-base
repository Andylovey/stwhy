<template>
  <div>
     <el-button v-if="permissionAdd" type="primary" @click="AddDialogTableVisible = true" class="AddVillageBtn"><i class="el-icon-edit"></i> 新增</el-button>
     <el-table
        v-if="permissionShow"
        v-loading="loading"
        element-loading-text="拼命加载中"
        element-loading-spinner="el-icon-loading"
        element-loading-background="rgba(0, 0, 0, 0.8)"
        :data="tableData"
        stripe
        border
        style="width: 100%"
        height="500"
        header-row-style="height:40px"
        row-style="height:40px">
            <el-table-column
            prop="f_name"
            label="名称"
            align="center"
            sortable
            flex="1"
            show-overflow-tooltip>
            </el-table-column>
            <el-table-column
            prop="f_type"
            label="类型"
            align="center"
            sortable
            flex="1"
            show-overflow-tooltip>
            </el-table-column>
            <el-table-column
            prop="f_key"
            label="标识"
            align="center"
            sortable
            flex="1"
            show-overflow-tooltip>
            </el-table-column>
            <el-table-column
            fixed="right"
            label="操作"
            align="center"
            flex="1">
            <template slot-scope="scope">
                <el-button v-if="permissionDetail" @click="handleDetail(scope.row)" type="text" size="small">查看</el-button>
                <el-button v-if="permissionEdit" @click="handleEdit(scope.row)" type="text" size="small">编辑</el-button>
                <el-button v-if="permissionDelete" @click="handleDelete(scope.row)" type="text" size="small">删除</el-button>
            </template>
            </el-table-column>
    </el-table>
    <!-- 分页 -->
    <div id="pagination">
      <el-pagination
        background
        layout="prev, pager, next,total ,jumper"
        :total="total"
        :page-size="limit"
        @current-change="handleCurrentChange">
      </el-pagination>
    </div>

    <!-- 查看详情的模态框 -->
    <el-dialog
      v-elDragDialog
      :visible.sync="DetailDialogTableVisible"
      title="字段管理详情" 
      :close-on-click-modal="false"
      width="750px">
      <!-- 表单 -->
      <el-form ref="DetailForm" :model="DetailForm" label-width="80px" style="width:100%;">
        <!-- <el-form-item label="序号">
          <el-input v-model="DetailForm.f_id" disabled></el-input>
        </el-form-item> -->
        <el-form-item label="名称">
          <el-input v-model="DetailForm.f_name" readonly></el-input>
        </el-form-item>
        <el-form-item label="类型">
          <!-- <el-input v-model="DetailForm.f_type" disabled></el-input> -->
          <el-radio v-model="DetailForm.f_type" label="0" disabled>文本框</el-radio>
          <el-radio v-model="DetailForm.f_type" label="1" disabled>图片</el-radio>
          <el-radio v-model="DetailForm.f_type" label="2" disabled>文本编辑器</el-radio>
          <el-radio v-model="DetailForm.f_type" label="3" disabled>音频</el-radio>
          <el-radio v-model="DetailForm.f_type" label="4" disabled>视频</el-radio>
          <el-radio v-model="DetailForm.f_type" label="5" disabled>时间</el-radio>
          <el-radio v-model="DetailForm.f_type" label="6" disabled>单选框</el-radio>
        </el-form-item>
        <el-form-item label="标识">
          <el-input v-model="DetailForm.f_key" readonly></el-input>
        </el-form-item>
      </el-form>
    </el-dialog>

    <!-- 编辑模态框 -->
    <el-dialog 
      v-elDragDialog
      :visible.sync="EditDialogTableVisible"
      title="字段管理编辑" 
      @closed="EditDialogClosed('EditForm')"
      :close-on-click-modal="false"
      width="750px">
      <!-- 表单 -->
      <el-form ref="EditForm" :model="EditForm" label-width="80px" :rules="EditRules" style="width:100%;">
          <!-- <el-form-item label="序号" prop="f_id">
              <el-input v-model="EditForm.f_id"></el-input>
          </el-form-item> -->
          <el-form-item label="名称" prop="f_name">
              <el-input v-model="EditForm.f_name"></el-input>
          </el-form-item>
          <el-form-item label="类型" prop="f_type">
                <!-- <el-input v-model="EditForm.f_type" disabled></el-input> -->
                <el-radio v-model="EditForm.f_type" label="0">文本框</el-radio>
                <el-radio v-model="EditForm.f_type" label="1">图片</el-radio>
                <el-radio v-model="EditForm.f_type" label="2">文本编辑器</el-radio>
                <el-radio v-model="EditForm.f_type" label="3">音频</el-radio>
                <el-radio v-model="EditForm.f_type" label="4">视频</el-radio>
                <el-radio v-model="EditForm.f_type" label="5">时间</el-radio>
                <el-radio v-model="EditForm.f_type" label="6">单选框</el-radio>
          </el-form-item>
          <el-form-item label="标识" prop="f_key">
              <el-input v-model="EditForm.f_key"></el-input>
          </el-form-item>
          <el-form-item>
            <el-button type="primary" @click="submitEditForm('EditForm')">提交</el-button>
            <el-button @click="cancleEditForm('EditForm')">取消</el-button>
          </el-form-item>
      </el-form>
    </el-dialog>

    <el-dialog 
      v-elDragDialog
      :visible.sync="AddDialogTableVisible"
      title="新建字段管理" 
      @closed="AddDialogClosed('AddForm')"
      :close-on-click-modal="false"
      width="750px">
      <!-- 表单 -->
      <el-form ref="AddForm" :model="AddForm" label-width="80px" :rules="AddRules" style="width:100%;">
          <!-- <el-form-item label="序号" prop="f_id">
              <el-input v-model="AddForm.f_id"></el-input>
          </el-form-item> -->
          <el-form-item label="名称" prop="f_name">
              <el-input v-model="AddForm.f_name"></el-input>
          </el-form-item>
          <el-form-item label="类型" prop="f_type">
                <!-- <el-input v-model="AddForm.f_type" disabled></el-input> -->
                <el-radio v-model="AddForm.f_type" label="0">文本框</el-radio>
                <el-radio v-model="AddForm.f_type" label="1">图片</el-radio>
                <el-radio v-model="AddForm.f_type" label="2">文本编辑器</el-radio>
                <el-radio v-model="AddForm.f_type" label="3">音频</el-radio>
                <el-radio v-model="AddForm.f_type" label="4">视频</el-radio>
                <el-radio v-model="AddForm.f_type" label="5">时间</el-radio>
                <el-radio v-model="AddForm.f_type" label="6">单选框</el-radio>
          </el-form-item>
          <el-form-item label="标识" prop="f_key">
              <el-input v-model="AddForm.f_key"></el-input>
          </el-form-item>
          <el-form-item>
            <el-button type="primary" @click="submitAddForm('AddForm')">提交</el-button>
            <el-button @click="cancleAddForm('AddForm')">取消</el-button>
          </el-form-item>
      </el-form>
    </el-dialog>
  </div>
</template>

<script>
// 引入接口
import api from '@/api/api.js'
// 获取token
import { getToken , removeToken } from '@/utils/auth'

import elDragDialog from '@/directive/el-dragDialog';

export default {
  name: 'field',
  directives: { elDragDialog }, // 拖拽指令
  data() {
      return {
        // 权限限制
        permissionShow : false,
        permissionAdd : false,
        permissionEdit : false,
        permissionDetail : false,
        permissionDelete : false,


        tableData : [],
        loading : true, // 加载条
        total: 0, // 分页总条数
        start: 0, // 默认第一页
        limit: 0,  // 每页10条

        // 查看详情的数据
        DetailDialogTableVisible : false, // 详情框默认的模态框
        DetailForm : {
            f_id : '',
            f_type : '',
            f_name : '',
            f_key : ''
        },

        // 编辑的数据
        EditDialogTableVisible : false, // 编辑框默认的模态框
        EditForm : {
            f_id : '',
            f_type : '',
            f_name : '',
            f_key : ''
        },
        EditRules : {
            // f_id : [{required: true,message : '请输入序号', trigger: 'blur'}],
            f_type : [{required: true,message : '请选择类型', trigger: 'blur'}],
            f_name : [{required: true,message : '请输入名称', trigger: 'blur'}],
            f_key : [{required: true,message : '请输入标识', trigger: 'blur'}]
        },

        // 新建的数据
        AddDialogTableVisible : false,
        AddForm : {
            f_id : '',
            f_type : '',
            f_name : '',
            f_key : ''
        },
        AddRules : {
            // f_id : [{required: true,message : '请输入序号', trigger: 'blur'}],
            f_type : [{required: true,message : '请选择类型', trigger: 'blur'}],
            f_name : [{required: true,message : '请输入名称', trigger: 'blur'}],
            f_key : [{required: true,message : '请输入标识', trigger: 'blur'}]
        },
      }
  },
  methods : {
      getSubPermission() {
          this.$http.get(`${api.dev}/p/permission/getSub`,{params: {access_token : getToken(), p_id : this.$route.params.id}}).then(res => {
              if(res.body.code == 200) {
                res.body.content.forEach(item => {
                    if(item.p_name.indexOf('显示') > -1) {
                        this.permissionShow = true;
                    }else if(item.p_name.indexOf('新建') > -1) {
                        this.permissionAdd = true
                    }else if(item.p_name.indexOf('修改') > -1) {
                        this.permissionEdit = true
                    }else if(item.p_name.indexOf('删除') > -1) {
                        this.permissionDelete = true
                    }else if(item.p_name.indexOf('查看') > -1) {
                        this.permissionDetail = true
                    }
                })
              }else if(res.body.code == 500) {
                this.$message({
                    message: res.body.msg,
                    type: 'error'
                });
                removeToken();
                setTimeout(function () {
                    window.location.href = '/stwhy';
                },2000) 
              }
          })
      },
      // 获取分页条数
    getLimit() {
        this.$http.post(`${api.dev}/p/main/preference/show`,{access_token:getToken()},{emulateJSON:true}).then(res => {
            if(res.body.code == 200) {
                this.limit = res.body.content.p_pagesize;
                this.getInfo();
            }else if(res.body.code == 500) {
                this.$message({
                    message: res.body.msg,
                    type: 'error'
                });
            }else if(res.body.code == 510) {
                this.$message({
                    message: res.body.msg,
                    type: 'error'
                });
                removeToken();
                setTimeout(function () {
                    window.location.href = '/stwhy';
                },2000)
            }
        })
    },
      getInfo() {
          this.$http.get(`${api.dev}/p/main/field/show`,{params : {access_token : getToken(), start : this.start, limit : this.limit}}).then(res => {
              if(res.body.code == 200) {
                  // 显示前先过滤
                  res.body.content.records.forEach( i => {
                      if(i.f_type == 0) {
                          i.f_type = '文本框'
                      }else if(i.f_type == 1) {
                          i.f_type = '图片'
                      }else if(i.f_type == 2) {
                          i.f_type = '文本编辑器'
                      }else if(i.f_type == 3) {
                          i.f_type = '音频';
                      }else if(i.f_type == 4) {
                          i.f_type = '视频'
                      }else if(i.f_type == 5) {
                          i.f_type = '时间'
                      }else if(i.f_type == 6) {
                          i.f_type = '单选框'
                      }
                  })
                  this.tableData = res.body.content.records;
                  this.total = res.body.content.total
                  this.loading = false;
              }else if (res.body.code == 500) {
                  this.$message({
                      message : res.body.msg,
                      type : 'error'
                  })
                  removeToken();
                  setTimeout(function () {
                    window.location.href = '/stwhy';
                  },2000)
              }
          })
      },
      // 详细操作
      handleDetail(row) {
          // 开启加载器
          const loading = this.$loading({
                lock: true,
                text: 'Loading',
                spinner: 'el-icon-loading',
                background: 'rgba(0, 0, 0, 0.7)'
          });
          this.$http.get(`${api.dev}/p/main/field/select`,{params : {access_token : getToken() , f_id : row.f_id}}).then(res => {
              if(res.body.code == 200) {
                  loading.close();
                  this.DetailDialogTableVisible = true;

                  this.DetailForm.f_id = res.body.content.f_id;
                  this.DetailForm.f_type = (res.body.content.f_type).toString();
                  this.DetailForm.f_name = res.body.content.f_name;
                  this.DetailForm.f_key = res.body.content.f_key;
              }else if (res.body.code == 500) {
                  this.$message({
                    message: res.body.msg,
                    type: 'error'
                  });
                  removeToken();
                  setTimeout(function () {
                    window.location.href = '/stwhy';
                  },2000)
              }
          })
      },
      // 编辑操作
      handleEdit(row) {
            // 开启加载器
            const loading = this.$loading({
                lock: true,
                text: 'Loading',
                spinner: 'el-icon-loading',
                background: 'rgba(0, 0, 0, 0.7)'
            });
            this.$http.get(`${api.dev}/p/main/field/select`,{params : {access_token : getToken() , f_id : row.f_id}}).then(res => {
                if(res.body.code == 200) {
                    loading.close();
                    this.EditDialogTableVisible = true;

                    this.EditForm.f_id = res.body.content.f_id;
                    this.EditForm.f_type = (res.body.content.f_type).toString();
                    this.EditForm.f_name = res.body.content.f_name;
                    this.EditForm.f_key = res.body.content.f_key;
                }else if (res.body.code == 500) {
                    this.$message({
                        message: res.body.msg,
                        type: 'error'
                    });
                    removeToken();
                    setTimeout(function () {
                        window.location.href = '/stwhy';
                    },2000)
                }
            })
      },
      // 删除操作
      handleDelete(row) {
            this.$confirm('此操作将永久删除该数据, 是否继续?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
            }).then(() => {
                this.loading = true;
                this.$http.post(`${api.dev}/p/main/field/delete`,{access_token: getToken() , f_id : row.f_id},{emulateJSON: true}).then(res => {
                    if(res.body.code == 200) {
                        this.$message({
                            message: '删除成功',
                            type: 'success'
                        });
                        this.getInfo();
                    }else if(res.body.code == 500) {
                        this.$message({
                            message : res.body.msg,
                            type : 'error'
                        })
                    }else if(res.body.code == 510) {
                        this.$message({
                            message : res.body.msg,
                            type : 'error'
                        })
                        removeToken();
                        setTimeout(function () {
                            window.location.href = '/stwhy';
                        },2000)
                    }
                })
            })
      },
      // 编辑提交
      submitEditForm(formName) {
          this.$refs[formName].validate((valid) => {
              if(valid) {
                    // 开启加载器
                    const loading = this.$loading({
                        lock: true,
                        text: '正在保存中...',
                        spinner: 'el-icon-loading',
                        background: 'rgba(0, 0, 0, 0.7)'
                    });
                    var formdata = new FormData();
                    formdata.append('access_token',getToken());
                    formdata.append('f_id',this.EditForm.f_id);
                    formdata.append('f_type',this.EditForm.f_type);
                    formdata.append('f_name',this.EditForm.f_name);
                    formdata.append('f_key',this.EditForm.f_key);
                    this.$http.post(`${api.dev}/p/main/field/update`,formdata,{emulateJSON:true}).then(res => {
                        if(res.body.code == 200) {
                            loading.close();
                            this.EditDialogTableVisible = false;
                            this.$refs[formName].clearValidate(); // 清除表单验证规则
                            this.$message({
                                message: res.body.msg,
                                type: 'success'
                            });
                            this.loading = true;
                            this.getInfo();
                        }else if(res.body.code == 500) {
                            loading.close();
                            this.$message({
                                message : res.body.msg,
                                type : 'error'
                            })
                        }
                    })
              }else {
                  console.log('error submit');
                  return false;
              }
          })
      },
      // 取消编辑
      cancleEditForm(formName) {
            this.EditDialogTableVisible = false;
            this.$refs[formName].clearValidate(); // 清除表单验证规则
      },
      // 关闭编辑框
      EditDialogClosed(formName) {
        this.$refs[formName].clearValidate(); // 清除表单验证规则
      },
      submitAddForm(formName) {
          this.$refs[formName].validate((valid) => {
              if(valid) {
                    // 开启加载器
                    const loading = this.$loading({
                        lock: true,
                        text: '正在保存中...',
                        spinner: 'el-icon-loading',
                        background: 'rgba(0, 0, 0, 0.7)'
                    });
                    var formdata = new FormData();
                    formdata.append('access_token',getToken());
                    formdata.append('f_id',this.AddForm.f_id);
                    formdata.append('f_type',this.AddForm.f_type);
                    formdata.append('f_name',this.AddForm.f_name);
                    formdata.append('f_key',this.AddForm.f_key);
                    this.$http.post(`${api.dev}/p/main/field/save`,formdata,{emulateJSON:true}).then(res => {
                        if(res.body.code == 200) {
                            loading.close();
                            this.$message({
                                message: res.body.msg,
                                type: 'success'
                            })
                            this.AddDialogTableVisible = false;
                            this.loading = true;
                            this.getInfo();
                            this.$refs[formName].resetFields(); // 清除表单验证规则 清空表单数据
                        }else if (res.body.code == 500) {
                            this.$message({
                                message: res.body.msg,
                                type : 'error'
                            })
                        }
                    })
              }else {
                  console.log('error submit');
                  return false;
              }
          })
      },
      // 关闭新增框
      AddDialogClosed(formName) {
          this.$refs[formName].resetFields(); // 清除表单验证规则
      },
      // 取消新增
      cancleAddForm(formName) {
            this.AddDialogTableVisible = false;
            this.$refs[formName].clearValidate(); // 清除表单验证规则
      },
      // 分页
      handleCurrentChange(val) {
        this.loading = true;
        this.start = this.limit * (val - 1);
        this.getInfo();
      }
  },
  created() {
      this.getLimit()
    //   this.getInfo()
      this.getSubPermission()
  }
}
</script>

<style lang="stylus" scoped>
#pagination
  margin-top 10px
.AddVillageBtn 
  margin-bottom 10px
</style>
