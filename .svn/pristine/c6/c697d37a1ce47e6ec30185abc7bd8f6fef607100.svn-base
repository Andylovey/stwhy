import * as types from '../mutaion-types'
import storage from '@/utils/storage'

const setViews = visitedViews => {
  storage.set('visitedViews', visitedViews)
}

const setCachedViews = cachedViews => {
  storage.set('cachedViews', cachedViews)
}

const tagView = {
  state: {
    visitedViews: storage.get('visitedViews') || [],
    cachedViews: storage.get('cachedViews') || []
  },
  mutations: {
    [types.ADD_VISITED_TAG]: (state, route) => {
      if (state.visitedViews.some(view => view.name === route.name)) return
      state.visitedViews.push({
        name: route.name,
        title: route.meta.title || 'empty-name',
        path: route.path
      })
      // if (!route.meta.noCache) {
      //   state.cachedViews.push({
      //     name: route.name,
      //     title: route.meta.title || 'empty-name',
      //     path: route.path
      //   })
      // }
      if (state.cachedViews.includes(route.name)) return
      if (!route.meta.noCache) {
        state.cachedViews.push(route.name)
        setCachedViews(state.cachedViews)
      }
      setViews(state.visitedViews)
    },
    [types.REMOVE_VISITED_TAG]: (state, tag) => {
      for (let [index, viewItem] of state.visitedViews.entries()) {
        if (viewItem.path === tag.path) {
          state.visitedViews.splice(index, 1)
          break
        }
      }
      for (let [index, name] of state.cachedViews.entries()) {
        if (name === tag.name) {
          state.cachedViews.splice(index, 1)
        }
      }
      setViews(state.visitedViews)
    },
    [types.CLOSE_OTHER_TAG]: (state, route) => {
      const newView = new Array({
        name: route.name,
        title: route.meta.title || 'empty-name',
        path: route.path
      })
      state.visitedViews = newView
      setViews(newView)
    },
    [types.CLOSE_ALL_TAG]: state => {
      state.visitedViews = []
      state.cachedViews = []
      setViews([])
      setCachedViews([])
    }
  },
  actions: {
    addVisitedTag({ commit }, route) {
      commit(types.ADD_VISITED_TAG, route)
    },
    removeVisitedTag({ commit, state }, tag) {
      return new Promise(resolve => {
        commit(types.REMOVE_VISITED_TAG, tag)
        resolve(state.visitedViews)
      })
    },
    closeOtherView({ commit }, route) {
      commit(types.CLOSE_OTHER_TAG, route)
    },
    closeAllView({ commit }) {
      return new Promise(resolve => {
        commit(types.CLOSE_ALL_TAG)
        resolve()
      })
    }
  }
}
// const tagView = {
//   state: {
//     visitedViews: [],
//     cachedViews: []
//   },
//   mutations: {
//     [types.ADD_VISITED_VIEW]: (state, view) => {
//       if (state.visitedViews.some(v => v.path === view.path)) return
//       state.visitedViews.push(
//         Object.assign({}, view, {
//           title: view.meta.title || 'no-name'
//         })
//       )
//     },
//     [types.ADD_CACHED_VIEW]: (state, view) => {
//       if (state.cachedViews.includes(view.name)) return
//       if (!view.meta.noCache) {
//         state.cachedViews.push(view.name)
//       }
//     },
//     [types.DEL_VISITED_VIEW]: (state, view) => {
//       for (const [i, v] of state.visitedViews.entries()) {
//         if (v.path === view.path) {
//           state.visitedViews.splice(i, 1)
//           break
//         }
//       }
//     },
//     [types.DEL_CACHED_VIEW]: (state, view) => {
//       for (const i of state.cachedViews) {
//         if (i === view.name) {
//           const index = state.cachedViews.indexOf(i)
//           state.cachedViews.splice(index, 1)
//           break
//         }
//       }
//     },
//     [types.DEL_OTHERS_VISITED_VIEWS]: (state, view) => {
//       for (const [i, v] of state.visitedViews.entries()) {
//         if (v.path === view.path) {
//           state.visitedViews = state.visitedViews.slice(i, i + 1)
//           break
//         }
//       }
//     },
//     [types.DEL_OTHERS_CACHED_VIEWS]: (state, view) => {
//       for (const i of state.cachedViews) {
//         if (i === view.name) {
//           const index = state.cachedViews.indexOf(i)
//           state.cachedViews = state.cachedViews.slice(index, index + 1)
//           break
//         }
//       }
//     },
//     [types.DEL_ALL_VISITED_VIEWS]: state => {
//       state.visitedViews = []
//     },
//     [types.DEL_ALL_CACHED_VIEWS]: state => {
//       state.cachedViews = []
//     },
//     [types.UPDATE_VISITED_VIEW]: (state, view) => {
//       for (let v of state.visitedViews) {
//         if (v.path === view.path) {
//           v = Object.assign(v, view)
//           break
//         }
//       }
//     }
//   },
//   actions: {
//     addView({ dispatch }, view) {
//       dispatch('addVisitedView', view)
//       dispatch('addCachedView', view)
//     },
//     addVisitedView({ commit }, view) {
//       commit('ADD_VISITED_VIEW', view)
//     },
//     addCachedView({ commit }, view) {
//       commit('ADD_CACHED_VIEW', view)
//     },

//     delView({ dispatch, state }, view) {
//       return new Promise(resolve => {
//         dispatch('delVisitedView', view)
//         dispatch('delCachedView', view)
//         resolve({
//           visitedViews: [...state.visitedViews],
//           cachedViews: [...state.cachedViews]
//         })
//       })
//     },
//     delVisitedView({ commit, state }, view) {
//       return new Promise(resolve => {
//         commit('DEL_VISITED_VIEW', view)
//         resolve([...state.visitedViews])
//       })
//     },
//     delCachedView({ commit, state }, view) {
//       return new Promise(resolve => {
//         commit('DEL_CACHED_VIEW', view)
//         resolve([...state.cachedViews])
//       })
//     },

//     delOthersViews({ dispatch, state }, view) {
//       return new Promise(resolve => {
//         dispatch('delOthersVisitedViews', view)
//         dispatch('delOthersCachedViews', view)
//         resolve({
//           visitedViews: [...state.visitedViews],
//           cachedViews: [...state.cachedViews]
//         })
//       })
//     },
//     delOthersVisitedViews({ commit, state }, view) {
//       return new Promise(resolve => {
//         commit('DEL_OTHERS_VISITED_VIEWS', view)
//         resolve([...state.visitedViews])
//       })
//     },
//     delOthersCachedViews({ commit, state }, view) {
//       return new Promise(resolve => {
//         commit('DEL_OTHERS_CACHED_VIEWS', view)
//         resolve([...state.cachedViews])
//       })
//     },
//     delAllViews({ dispatch, state }, view) {
//       return new Promise(resolve => {
//         dispatch('delAllVisitedViews', view)
//         dispatch('delAllCachedViews', view)
//         resolve({
//           visitedViews: [...state.visitedViews],
//           cachedViews: [...state.cachedViews]
//         })
//       })
//     },
//     delAllVisitedViews({ commit, state }) {
//       return new Promise(resolve => {
//         commit('DEL_ALL_VISITED_VIEWS')
//         resolve([...state.visitedViews])
//       })
//     },
//     delAllCachedViews({ commit, state }) {
//       return new Promise(resolve => {
//         commit('DEL_ALL_CACHED_VIEWS')
//         resolve([...state.cachedViews])
//       })
//     },
//     updateVisitedView({ commit }, view) {
//       commit('UPDATE_VISITED_VIEW', view)
//     }
//   }
// }

export default tagView
