<template>
	<div>
		<el-button v-if="permissionAdd" type="primary" @click="AddDialogTableVisible = true" class="AddVillageBtn margin-bottom-10"><i class="el-icon-edit"></i> 新增</el-button>
		<!-- <el-button v-if="permissionSet" type="primary" @click="" class="SetPermission"><i class="el-icon-setting"></i> 权限管理</el-button> -->
		<div style="float: right;">
			<el-input v-model="searchName" placeholder="请输入搜索用户名" style="width:200px" @keyup.enter.native="getInfo('search')"></el-input>
			<el-button slot="append" icon="el-icon-search" type="primary" @keyup.enter="getInfo('search')" @click="getInfo('search')"  style="margin-left:10px;">搜索</el-button>
		</div>
		<el-table
			v-if="permissionShow"
			v-loading="loading"
			element-loading-text="拼命加载中"
			element-loading-spinner="el-icon-loading"
			element-loading-background="rgba(0, 0, 0, 0.8)"
			:data="tableData"
			border
			style="width: 100%"
			height="calc(100% - 100px)">
			<!--<el-table-column prop="admin_id" label="序号" sortable align="center" width="80"></el-table-column>-->
			<el-table-column prop="username" label="用户名" sortable align="center" width="140"></el-table-column>
			<el-table-column prop="admin_typeText" label="用户类别" sortable align="center" width="172"></el-table-column>
			<el-table-column prop="admin_phone" label="手机号码" sortable align="center" width="160"></el-table-column>
			<el-table-column prop="dpm_name" label="所属部门名称" sortable align="center" width="160"></el-table-column>
			<el-table-column prop="duty_name" label="职位名称" sortable align="center" width="160"></el-table-column>
			<el-table-column label="状态" sortable align="center" width="150">
				<template slot-scope="scope">
					<template v-if="scope.row.admin_type != 0 && permissionSwitch">
						<el-switch
							v-model="scope.row.admin_state"
							active-color="#13ce66"
							inactive-color="#ff4949"
							@change="submitStateForm(scope.row)"
						>
						</el-switch>
					</template>
					<template v-else>
						<el-switch
							v-model="scope.row.admin_state"
							active-color="#13ce66"
							inactive-color="#ff4949"
							@change="submitStateForm(scope.row)"
							disabled
						>
						</el-switch>
					</template>
				</template>
			</el-table-column>
			<el-table-column prop="admin_autoauditText" label="是否发文自动审核" sortable align="center" width="172"></el-table-column>
			<el-table-column prop="admin_autopublishText" label="是否发文自动发布" sortable align="center" width="172"></el-table-column>
			<el-table-column prop="admin_lastlogintime" label="最近登录时间" sortable align="center" width="180"></el-table-column>
			<el-table-column prop="admin_remark" label="备注信息" sortable align="center" width="200"></el-table-column>
			<el-table-column
				fixed="right"
				label="操作"
				align="center"
				:width="dowidth" v-if="permissionEdit || permissionSet || permissionRePsw">
				<template slot-scope="scope">
					<template v-if="scope.row.admin_type != 0">
						<el-button v-if="permissionEdit" @click="handleEdit(scope.row)" type="text" size="small">编辑</el-button>
						<!-- <el-button v-if="permissionState" @click="handleState(scope.row)" type="text" size="small">状态</el-button> -->
						<el-button v-if="permissionSet" @click="handleSet(scope.row)" type="text" size="small">权限管理</el-button>
					</template>
					<template v-else>
						<el-button v-if="permissionEdit" type="text" size="small" disabled>编辑</el-button>
						<!-- <el-button v-if="permissionState" type="text" size="small" disabled>状态</el-button> -->
						<el-button v-if="permissionSet" type="text" size="small" disabled>权限管理</el-button>
					</template>
					<el-button v-if="permissionRePsw" @click="handleRePsw(scope.row)" type="text" size="small">重置密码</el-button>
				</template>
			</el-table-column>
		</el-table>

		<!-- 分页 -->
		<div id="pagination">
			<el-pagination
				background
				layout="prev, pager, next"
				:total="total"
				:page-size="limit"
				@current-change="handleCurrentChange">
			</el-pagination>
		</div>

		<!-- 新建模态框 -->
		<el-dialog 
			:visible.sync="AddDialogTableVisible"
			title="新建用户" 
			top="60px"
			@closed="cancleAddForm('AddForm')"
			width="900px"
			:close-on-click-modal="false">
			<!-- 表单 -->
			<el-form ref="AddForm" :model="AddForm" label-width="140px" :rules="AddRules" style="width:100%;">
				<el-row>
					<el-col :span="12">
						<el-form-item label="用户名" prop="username">
							<el-input v-model="AddForm.username" placeholder="请输入用户名" style="width: 260px"></el-input>
						</el-form-item>
					</el-col>
					<el-col :span="12">
						<el-form-item label="所属部门" prop="admin_dpm">
							<el-select class="padding-right-12" v-model="AddForm.admin_dpm" auto-complete="off" placeholder="请选择所属部门" style="width:200px" clearable @change="getDuty(AddForm)">
								<el-option v-for="item in departmentList" :label="item.name" :value="item.id" :key="item.id"></el-option>
							</el-select>
						</el-form-item>
					</el-col>
				</el-row>
				<el-row>
					<el-col :span="12">
						<el-form-item label="密码" prop="password">
							<el-input v-model="AddForm.password" auto-complete="new-password" type="password" placeholder="(6位以上/不能纯数字/字母/符号)" style="width: 260px"></el-input>
						</el-form-item>
					</el-col>
					<el-col :span="12">
						<el-form-item label="职务" prop="admin_duty">
							<el-select class="padding-right-12" v-model="AddForm.admin_duty" auto-complete="off" placeholder="请选择职务" style="width:200px" clearable >
								<el-option v-for="item in dutyList" :label="item.name" :value="item.id" :key="item.id"></el-option>
							</el-select>
						</el-form-item>
					</el-col>
				</el-row>
				<el-form-item label="确认密码" prop="rePassword">
					<el-input v-model="AddForm.rePassword" auto-complete="new-password" type="password" placeholder="请再次输入密码" style="width: 260px"></el-input>
				</el-form-item>
				<el-form-item label="手机号码" prop="admin_phone">
					<el-input v-model.number="AddForm.admin_phone" placeholder="请再次输入手机号码" style="width: 260px"></el-input>
				</el-form-item>
				<el-form-item label="用户类别" prop="admin_type">
					<el-radio v-model="AddForm.admin_type" label="1">运营（管理员）</el-radio>
					<el-radio v-model="AddForm.admin_type" label="2">运营（普通用户）</el-radio>
					<el-radio v-model="AddForm.admin_type" label="3">政府人员（普通用户）</el-radio>
					<el-radio v-model="AddForm.admin_type" label="4">商家（普通用户）</el-radio>
				</el-form-item>
				<el-form-item label="是否发文自动审核" prop="admin_autoaudit">
					<el-radio v-model="AddForm.admin_autoaudit" label="1">是</el-radio>
					<el-radio v-model="AddForm.admin_autoaudit" label="0">否</el-radio>
				</el-form-item>
				<el-form-item label="是否发文自动发布" prop="admin_autopublish">
					<el-radio v-model="AddForm.admin_autopublish" label="1">是</el-radio>
					<el-radio v-model="AddForm.admin_autopublish" label="0">否</el-radio>
				</el-form-item>
				<el-form-item label="备注信息" prop="admin_remark">
					<el-input v-model="AddForm.admin_remark" placeholder="请输入备注信息"></el-input>
				</el-form-item>
				<el-form-item class="text-align-right">
					<el-button type="primary" @click="submitAddForm('AddForm')">提交</el-button>
					<el-button @click="cancleAddForm('AddForm')">取消</el-button>
				</el-form-item>
			</el-form>
		</el-dialog>

		<!-- 编辑模态框 -->
		<el-dialog 
			:visible.sync="EditDialogTableVisible"
			title="修改用户" 
			top="60px"
			width="900px"
			@closed="cancleEditForm('EditForm')"
			:close-on-click-modal="false">
			<el-form ref="EditForm" :model="EditForm" label-width="140px" :rules="EditRules" style="width:100%;">
				<el-row>
					<el-col :span="12">
						<el-form-item label="用户名" prop="username">
							<el-input v-model="EditForm.username" style="width: 260px"></el-input>
						</el-form-item>
					</el-col>
					<el-col :span="12">
						<el-form-item label="所属部门" prop="admin_dpm">
							<el-select class="padding-right-12" v-model="EditForm.admin_dpm" auto-complete="off" placeholder="请选择所属部门" style="width:200px" clearable @change="getDuty(EditForm)">
								<el-option v-for="item in departmentList" :label="item.name" :value="item.id" :key="item.id"></el-option>
							</el-select>
						</el-form-item>
					</el-col>
				</el-row>
				<el-row>
					<el-col :span="12">
						<el-form-item label="手机号码" prop="admin_phone">
							<el-input v-model.number="EditForm.admin_phone" style="width: 260px"></el-input>
						</el-form-item>
					</el-col>
					<el-col :span="12">
						<el-form-item label="职务" prop="admin_duty">
							<el-select class="padding-right-12" v-model="EditForm.admin_duty" auto-complete="off" placeholder="请选择职务" style="width:200px" clearable >
								<el-option v-for="item in dutyList" :label="item.name" :value="item.id" :key="item.id"></el-option>
							</el-select>
						</el-form-item>
					</el-col>
				</el-row>

				<!-- <el-form-item label="状态" prop="admin_state">
					<el-radio v-model="EditForm.admin_state" label="1">开启</el-radio>
					<el-radio v-model="EditForm.admin_state" label="0">停用</el-radio>
				</el-form-item> -->
				<el-form-item label="用户类别" prop="admin_type" v-show="typeShow">
					<el-radio v-model="EditForm.admin_type" label="1">运营（管理员）</el-radio>
					<el-radio v-model="EditForm.admin_type" label="2">运营（普通用户）</el-radio>
					<el-radio v-model="EditForm.admin_type" label="3">政府人员（普通用户）</el-radio>
					<el-radio v-model="EditForm.admin_type" label="4">商家（普通用户）</el-radio>
					<el-radio v-model="EditForm.admin_type" label="0" v-show="false">运营（超级管理员）</el-radio>
				</el-form-item>
				<el-form-item label="是否发文自动审核" prop="admin_autoaudit">
					<el-radio v-model="EditForm.admin_autoaudit" label="1">是</el-radio>
					<el-radio v-model="EditForm.admin_autoaudit" label="0">否</el-radio>
				</el-form-item>
				<el-form-item label="是否发文自动发布" prop="admin_autopublish">
					<el-radio v-model="EditForm.admin_autopublish" label="1">是</el-radio>
					<el-radio v-model="EditForm.admin_autopublish" label="0">否</el-radio>
				</el-form-item>
				<el-form-item label="备注信息" prop="admin_remark">
					<el-input v-model="EditForm.admin_remark" placeholder="请输入备注信息"></el-input>
				</el-form-item>
				<el-form-item class="text-align-right">
					<el-button type="primary" @click="submitEditForm('EditForm')">提交</el-button>
					<el-button @click="cancleEditForm('EditForm')">取消</el-button>
				</el-form-item>
			</el-form>
		</el-dialog>

		<!-- 状态开启停用框 -->
		<!-- <el-dialog 
			:visible.sync="StateDialogTableVisible"
			title="状态设置" 
			top="60px"
			width="30%"
			@closed="cancleStateForm('StateForm')"
			:close-on-click-modal="false">
			<el-form ref="StateForm" :model="StateForm" label-width="80px" :rules="StateRules" style="width:100%;">
				<el-form-item label="用户名" prop="username">
					<el-input v-model="StateForm.username" disabled></el-input>
				</el-form-item>
				<el-form-item label="状态" prop="admin_state">
					<el-radio v-model="StateForm.admin_state" label="1">开启</el-radio>
					<el-radio v-model="StateForm.admin_state" label="0">停用</el-radio>
				</el-form-item>
				<el-form-item class="text-align-right">
					<el-button type="primary" @click="submitStateForm('StateForm')">提交</el-button>
					<el-button @click="cancleStateForm('StateForm')">取消</el-button>
				</el-form-item>
			</el-form>
		</el-dialog> -->

		<!-- 重置密码框 -->
		<el-dialog 
			:visible.sync="RePswDialogTableVisible"
			title="重置用户密码" 
			top="60px"
			width="30%"
			@closed="cancleRePswForm('RePswForm')"
			:close-on-click-modal="false">
			<el-form ref="RePswForm" :model="RePswForm" label-width="80px" :rules="RePswRules" style="width:100%;">
				<el-form-item label="用户名" prop="username">
					<el-input v-model="RePswForm.username" disabled></el-input>
				</el-form-item>
				<el-form-item label="新密码" prop="password">
					<el-input v-model="RePswForm.password" type="password" placeholder="请输入新密码" auto-complete="new-password"></el-input>
				</el-form-item>
				<el-form-item label="确认密码" prop="rePassword">
					<el-input v-model="RePswForm.rePassword" type="password" placeholder="请再次输入新密码" auto-complete="new-password"></el-input>
				</el-form-item>
				<el-form-item class="text-align-right">
					<el-button type="primary" @click="submitRePswForm('RePswForm')">提交</el-button>
					<el-button @click="cancleRePswForm('RePswForm')">取消</el-button>
				</el-form-item>
			</el-form>
		</el-dialog>

		<!-- 权限管理框 -->
		<el-dialog 
			:visible.sync="SetDialogTableVisible"
			:title="SetTitle" 
			top="60px"
			width="700px"
			@closed="cancleSetForm('SetForm')"
			:close-on-click-modal="false">
			<!-- 表单 -->
			<el-form ref="SetForm" :model="SetForm" class="permissionsTree" style="width:100%;">
				<el-form-item>
					<el-row class="custom-tree-container" >
						<el-col :span="8">
							<div class="padding-left-18">角色列表</div>
							<el-tree
								:data="roleData"
								class="tree"
								show-checkbox
								accordion
								node-key="id"
								ref="roleTree"
								@check-change="handleRoleCheck"
								style="height: 400px; overflow-y: auto;"
							>
							</el-tree>
						</el-col>
						<el-col :span="16">
							<div class="padding-left-18">权限列表</div>
							<el-tree
								:data="permissionsData"
								class="tree"
								show-checkbox
								accordion
								node-key="id"
								ref="permissionsTree"
								@check-change="handlePermissionsData"
								style="height: 400px; overflow-y: auto;"
							>
							</el-tree>
						</el-col>
					</el-row>
				</el-form-item>
				<el-form-item class="text-align-right padding-right-12">
					<el-button type="primary" @click="submitSetForm('SetForm')">提交</el-button>
					<el-button @click="cancleSetForm('SetForm')">取消</el-button>
				</el-form-item>
			</el-form>
		</el-dialog>
	</div>
</template>

<script>
// 引入接口
import api from '@/api/api.js'
// 获取token
import { getToken , removeToken } from '@/utils/auth'
// 时间过滤器
import {formatDate} from '@/filter/date.js'

export default {
	name: 'user',
	data() {
		// 手机验证
		var checkPhone = (rule, value, callback) => {        
			if (!value) {           
				return callback(new Error('手机号不能为空'));         
			} else {          
				const reg = /^1[3|4|5|7|8][0-9]\d{8}$/;
				console.log(reg.test(value));          
				if (reg.test(value)) {            
					callback();         
				} else {            
					return callback(new Error('请输入正确的手机号'));          
				}     
			}
		};
		//密码验证
		var checkPassword = (rule, value, callback) => {        
			if (!value) {           
				return callback(new Error('密码不能为空'));         
			} else {          
				const reg = /^(?![\d]+$)(?![a-zA-Z]+$)(?![^\da-zA-Z]+$).{6,}$/;
				console.log(reg.test(value));          
				if (reg.test(value)) {            
					callback();         
				} else {            
					return callback(new Error('请输入6位以上密码(不能纯数字/字母/符号)'));          
				}     
			}
		};
		//确认密码
		var checkConfirmPassword = (rule, value, callback) => {        
			if (!value) {           
				return callback(new Error('请再次输入新密码'));         
			} else {     
				const psw = this.getPassword();
				console.log('repws: '+value);   
				console.log('pws: '+psw)  
				if (psw == value) {            
					callback();         
				} else {            
					return callback(new Error('两次输入的密码不一致'));          
				}     
			}
		};
		return {
			/* 
			 * tableData: 表格数据
			 * loading: 加载状态（默认为true）
			 * total: 总条数（table数据总长度）
			 * start: 表格分页（默认第一页）
			 * limit: 每页显示条数
			 * searchName: 搜索（用户名）
			 */
			tableData : [],
			loading : true,
			total: 0,
			start : 0,
			limit : 10,
			searchName: '',
			dowidth: 180,

			departmentList: [],
			dutyList: [],

			/* 新增部分 */
			AddDialogTableVisible : false, //默认隐藏
			AddForm : {
				username: '',
				password: '',
				rePassword: '',
				admin_phone: '',
				admin_type: '',
				admin_remark: '',
				admin_autoaudit: '',
				admin_autopublish: '',
				admin_dpm: '',
				admin_duty: '',
			},
			AddRules : {
				username : [{required: true, message : '请输入用户名', trigger: 'blur'}],
				password : [{required: true, validator: checkPassword, trigger: 'blur'}],
				rePassword : [{required: true, validator: checkConfirmPassword, trigger: 'blur'}],
				admin_phone : [{required: true, validator: checkPhone, trigger: 'blur'}],
				admin_type : [{required: true, message : '请选择用户类别', trigger: 'blur'}],
				admin_remark : [{required: false, message : '请输入备注信息', trigger: 'blur'}],
				admin_autoaudit : [{required: true, message : '请选择是否发文自动审核', trigger: 'blur'}],
				admin_autopublish : [{required: true, message : '请选择是否发文自动发布', trigger: 'blur'}],
				admin_dpm : [{required: true, message : '请选择所属部门', trigger: 'change'}],
				admin_duty : [{required: true, message : '请选择职位', trigger: 'change'}]
			},

			/* 编辑部分 */
			typeShow: true,
			EditDialogTableVisible : false, //默认隐藏
			EditForm : {
				username: '',
				admin_phone: '',
				admin_type: '',
				admin_remark: '',
				admin_autoaudit: '',
				admin_autopublish: '',
				admin_dpm: '',
				admin_duty: '',
			},
			EditRules : {
				username : [{required: true, message : '请输入用户名', trigger: 'blur'}],
				admin_phone : [{required: true, validator: checkPhone, trigger: 'blur'}],
				admin_type : [{required: true, message : '请选择用户类别', trigger: 'blur'}],
				admin_remark : [{required: false, message : '请输入备注信息', trigger: 'blur'}],
				admin_autoaudit : [{required: true, message : '请选择是否发文自动审核', trigger: 'blur'}],
				admin_autopublish : [{required: true, message : '请选择是否发文自动发布', trigger: 'blur'}],
				admin_dpm : [{required: true, message : '请选择所属部门', trigger: 'change'}],
				admin_duty : [{required: true, message : '请选择职位', trigger: 'change'}]
			},

			currentForm: 'AddForm', // 当前表单

			/* 状态部分 */
			//stateDisabled: true,
			/*StateDialogTableVisible : false, //默认隐藏
			StateForm : {
				admin_state: '',
			},
			StateRules : {
				admin_state: [{required: true, message : '请选择状态', trigger: 'blur'}],
			},*/

			/* 重置密码部分 */
			RePswDialogTableVisible : false, //默认隐藏
			RePswForm : {
				password: '',
				rePassword: '',
			},
			RePswRules : {
				password : [{required: true, validator: checkPassword, trigger: 'blur'}],
				rePassword : [{required: true, validator: checkConfirmPassword, trigger: 'blur'}],
			},

			/* 权限管理 */
			SetDialogTableVisible : false, //默认隐藏
			SetTitle : '权限管理',
			SetForm : {},
			roleData: [],
			//roleCheck: [],
			permissionsData: [],
			permissionsCheck: [],

			permissionShow: false, // 默认为false,根据权限是否显示
			permissionEdit: false, // 默认为false,根据权限是否修改
			permissionAdd: false, // 默认为false,根据权限是否新建
			permissionSet: false, // 默认为false,根据权限是否可以权限管理
			permissionSwitch: false, // 默认为false,根据权限是否开启停用
			permissionRePsw: false, // 默认为false,根据权限是否重置用户密码
		}
	},
	methods : {
		getLimit(){
			this.$http.post(
				`${api.dev}/p/main/preference/show`,
				{
					access_token: getToken(),
				},
				{emulateJSON : true}
			).then(res => {
				if(res.body.code == 200) {
					this.limit = (res.body.content) ? res.body.content.p_pagesize : 10;
					this.getInfo();
				}else if(res.body.code == 500) {
					this.$message({
						message: res.body.msg,
						type: 'error'
					});
					this.getInfo();
				}else if(res.body.code == 510) {
					this.$message({
						message: res.body.msg,
						type: 'error'
					});
					removeToken();
					setTimeout(function () {
						this.$router.push({path: '/login'})
					},2000)
				}
			})
		},
		/* 获取权限 */
		getSubPermission() {
			this.$http.get(
				`${api.dev}/p/permission/getSub`,
				{
					params:{
						access_token:getToken(),
						p_id: this.$route.params.id
					}
				}
			).then(res => {
				if(res.body.code == 200) {
					res.body.content.forEach(item => {
						if(item.p_name.indexOf('显示') > -1) {
							this.permissionShow = true;
						}else if(item.p_name.indexOf('修改') > -1) {
							this.permissionEdit = true;
						}else if(item.p_name.indexOf('新建') > -1) {
							this.permissionAdd = true;
						}else if(item.p_name.indexOf('设置权限') > -1) {
							this.permissionSet = true;
						}else if(item.p_name.indexOf('启用') > -1) {
							//this.stateDisabled = false;
							this.permissionSwitch = true;
						}else if(item.p_name.indexOf('重置用户密码') > -1) {
							this.permissionRePsw = true;
						}
					})
				}else if(res.body.code == 500) {
					this.$message({
						message: res.body.msg,
						type: 'error'
					});
				}else if(res.body.code == 510) {
					this.$message({
						message: res.body.msg,
						type: 'error'
					});
					removeToken();
					setTimeout(function () {
						this.$router.push({path: '/login'})
					},2000)
				}
			})
		},
		/* 获取部门信息 */
		getDepartment(){
			this.$http.get(
				`${api.dev}/p/main/drop/selectDepartment`,
				{
					params:{
						access_token: getToken(),
						type: 0
					}
				}
			).then(res => {
				if(res.body.code == 200) {
					this.departmentList = res.body.content;
					this.loading = false;
				}else if(res.body.code == 500) {
					this.$message({
						message: res.body.msg,
						type: 'error'
					});
				}else if(res.body.code == 510) {
					this.$message({
						message: res.body.msg,
						type: 'error'
					});
					removeToken();
					setTimeout(function () {
						this.$router.push({path: '/login'})
					},2000)
				}
			})
		},
		/* 获取职位信息 */
		getDuty(formName, duty_name){
			this.$http.get(
				`${api.dev}/p/main/drop/selectDuty`,
				{
					params:{
						access_token: getToken(),
						type: 0,
						dpm_id: formName.admin_dpm
					}
				}
			).then(res => {
				if(res.body.code == 200) {
					formName.admin_duty = '';
					this.dutyList = res.body.content;
					this.loading = false;
					console.log(this.dutyList);
					if(duty_name){
						res.body.content.forEach(item => {
							if(item.name.indexOf(duty_name) > -1) {
								this.EditForm.admin_duty = item.id;
								console.log(item.name + ' : ' +item.id);
							}
						})
					}
				}else if(res.body.code == 500) {
					this.$message({
						message: res.body.msg,
						type: 'error'
					});
				}else if(res.body.code == 510) {
					this.$message({
						message: res.body.msg,
						type: 'error'
					});
					removeToken();
					setTimeout(function () {
						this.$router.push({path: '/login'})
					},2000)
				}
			})
		},
		/* 表格数据加载 */
		getInfo(searchName){
			var searchVal = (searchName == 'search') ? this.searchName : '';
			this.$http.post(
				`${api.dev}/p/main/admin/show`,
				{
					access_token: getToken(),
					start: this.start,
					limit: this.limit,
					name1: searchVal
				},
				{emulateJSON : true}
			).then(res => {
				if(res.body.code == 200) {
					res.body.content.records.forEach(i => {
						switch(i.admin_type){
							case 0:
								i.admin_typeText = '运营（超级管理员）';
								break;
							case 1: 
								i.admin_typeText = '运营（管理员）';
								break;
							case 2:
								i.admin_typeText = '运营（普通用户）';
								break;
							case 3:
								i.admin_typeText = '政府人员（普通用户）';
								break;
							case 4:
								i.admin_typeText = '商家（普通用户）';
								break;
						}

						if(i.admin_autopublish) {
							i.admin_autopublishText = '是';
						}else{
							i.admin_autopublishText = '否';
						}
						if(i.admin_autoaudit) {
							i.admin_autoauditText = '是';
						}else{
							i.admin_autoauditText = '否';
						}
						i.admin_lastlogintime = formatDate(new Date(i.admin_lastlogintime) , 'yyyy-MM-dd hh:mm:ss');
						if(i.admin_state){
							i.admin_stateText = '启用';
						}else{
							i.admin_stateText = '停用';
						}
					});
					this.tableData = res.body.content.records;
					this.total = res.body.content.total;
					this.loading = false;
				}else if(res.body.code == 500) {
					this.$message({
						message: res.body.msg,
						type: 'error'
					});
				}else if(res.body.code == 510) {
					this.$message({
						message: res.body.msg,
						type: 'error'
					});
					removeToken();
					setTimeout(function () {
						this.$router.push({path: '/login'})
					},2000)
				}
			})
		},
		/* 获取当前表单校验时间 */
		getPassword(){
			if(this.currentForm == 'AddForm'){
				return this.AddForm.password;
			}else{
				return this.RePswForm.password;
			}
		},
		/* 编辑框加载 */
		handleEdit(row) {
			this.EditForm.username = row.username;
			this.EditForm.admin_phone = row.admin_phone;
			this.EditForm.admin_type = (row.admin_type).toString();
			this.EditForm.admin_remark = row.admin_remark;
			this.EditForm.admin_autoaudit = row.admin_autoaudit;
			this.EditForm.admin_id = row.admin_id;
			this.departmentList.forEach(item => {
				if(item.name.indexOf(row.dpm_name) > -1) {
					this.EditForm.admin_dpm = item.id;
					this.getDuty(this.EditForm, row.duty_name);
				}
			})
			
			if(row.admin_autopublish) {
				this.EditForm.admin_autopublish = '1';
			}else{
				this.EditForm.admin_autopublish = '0';
			}
			if(row.admin_autoaudit) {
				this.EditForm.admin_autoaudit = '1';
			}else{
				this.EditForm.admin_autoaudit = '0';
			}
			if(row.admin_type == 0){
				this.typeShow = false;
			}else{
				this.typeShow = true;
			}
			this.EditDialogTableVisible = true;
		},
		/* 状态框加载 - 右侧按钮 */
		/*handleState(row) {
			// 开启加载器
			const loading = this.$loading({
				lock: true,
				text: 'Loading',
				spinner: 'el-icon-loading',
				background: 'rgba(0, 0, 0, 0.7)'
			});
			//debugger;
			this.StateForm.username = row.username;
			if(row.admin_state){
				this.StateForm.admin_state = '1'
			}else{
				this.StateForm.admin_state = '0'
			}
			this.StateForm.admin_id = row.admin_id;
			loading.close();
			this.StateDialogTableVisible = true;
		},*/
		/* 重置密码 */
		handleRePsw(row){
			this.currentForm = 'RePswForm';
			this.RePswForm.username = row.username;
			this.RePswForm.admin_id = row.admin_id;
			this.RePswForm.password = '';
			this.RePswForm.rePassword = '';
			this.RePswDialogTableVisible = true;
		},
		/* 权限树 */
		buildTree(id, arry) {
			let treeArry = new Array();
			let newArry = new Array();
			arry.forEach(item => {
				if (item.p_fid == id){
					treeArry.push({
						id: item.p_id,
						pid: item.p_fid,
						label: item.p_name,
						icon: item.p_icon,
						children: []
					});
				}else{
					newArry.push(item)
				}
			})
			if (treeArry.length > 0) {
				treeArry.forEach(item => {
					let treeChildArry = this.buildTree(item.id, newArry);
					if (treeChildArry.length > 0){
						item.children = treeChildArry;
					}
				})
			}
			return treeArry;
		},
		/* 权限管理加载 */
		handleSet(row){
			this.SetForm.username = row.username;
			this.SetForm.admin_id = row.admin_id;
			this.$http.post(
				`${api.dev}/p/main/admin/selectPermission`,
				{
					access_token: getToken(),
					admin_id: row.admin_id
				},
				{emulateJSON : true}
			).then(res => {
				if(res.body.code == 200) {
					let all_p_Data = res.body.content.all_p;
					this.permissionsData = this.buildTree(0, res.body.content.all_p); //权限树
					//this.roleData = this.buildTree(0, res.body.content.all_role); 
					res.body.content.all_role.forEach(item => { //角色树
						this.roleData.push({
							id: item.role_id,
							pids: item.p_ids,
							label: item.role_name
						})
					});
					//res.body.content.select_p.up_p_id.split(',');
					//debugger;
					this.SetTitle = '权限管理（用户： ' + row.username + '）';
					this.loading = false;
					this.SetDialogTableVisible = true;

					if(res.body.content.select_p){
						console.log(res.body.content.select_p.up_p_id.split(','));
						this.$nextTick(() => {
							this.$refs.permissionsTree.setCheckedKeys(res.body.content.select_p.up_p_id.split(','));
						})
					}
					if(res.body.content.select_role){
						var roleArr = [];
						res.body.content.select_role.forEach(item => {
							if(item.p_ids) roleArr.push(item.p_ids.rp_id);
						})
						this.$nextTick(() => {
							this.$refs.roleTree.setCheckedKeys(roleArr);
						})
					}
				}else if(res.body.code == 500) {
					this.$message({
						message: res.body.msg,
						type: 'error'
					});
				}else if(res.body.code == 510) {
					this.$message({
						message: res.body.msg,
						type: 'error'
					});
					removeToken();
					setTimeout(function () {
						this.$router.push({path: '/login'})
					},2000)
				}
			})  
		},
		/* 权限操作 - 选择取消权限 */
		handlePermissionsData(data, checked, indeterminate) {
			console.log(data, checked, indeterminate);
			var arr = this.permissionsCheck;
			if(checked){
				this.permissionsCheck.push(data.id)
			}else{
				for(var i=0; i<arr.length; i++){
					if(arr[i] == data.id){
						this.permissionsCheck = arr.splice(i, 1); 
						return;
					}
				}
			}
		},
		/* 权限操作 - 选择取消角色 */
		handleRoleCheck(data, checked, indeterminate) {
			console.log(data, checked, indeterminate);
			if(data.pids){
				console.log('点击:'+data.pids.rp_p_id);
				let pidsArr = data.pids.rp_p_id.split(',');
				var oldArr = this.permissionsCheck;
				var newArr = this.permissionsCheck;
				console.log('oldArr:'+oldArr);
				if(checked){
					if(oldArr.length > 0){
						for(var i=0; i<pidsArr.length; i++){
							var isRepeat = false;
							for(var j=0; j<oldArr.length; j++){
								if(oldArr[j] == pidsArr[i]){
									isRepeat = true;
									break;
								}
							}
							if(!isRepeat){
								newArr.push(parseInt(pidsArr[i]));
							}
						}
					}else{
						newArr = pidsArr;
					}
				}else{
					if(oldArr.length > 0){
						newArr = [];
						for(var j=0; j<oldArr.length; j++){
							var isHas = false;
							for(var i=0; i<pidsArr.length; i++){
								if(oldArr[j] == pidsArr[i]){
									isHas = true;
									break;
								}
							}
							if(!isHas){
								newArr.push(parseInt(oldArr[j]));
							}
						}
					}
				}
				console.log('newArr:'+newArr);
				this.permissionsCheck = newArr;
				this.$refs.permissionsTree.setCheckedKeys(newArr);
			}
		},
		/* 新增提交 */
		submitAddForm(formName) {
			this.$refs[formName].validate((valid) => {
				if(valid) {
					// 开启加载器
					const loading = this.$loading({
						lock: true,
						text: '正在保存中...',
						spinner: 'el-icon-loading',
						background: 'rgba(0, 0, 0, 0.7)'
					});
					var formdata = new FormData();
					formdata.append('access_token',getToken());
					formdata.append('username',this.AddForm.username);
					formdata.append('password',this.AddForm.password);
					formdata.append('admin_phone',this.AddForm.admin_phone);
					formdata.append('admin_type',this.AddForm.admin_type);
					formdata.append('admin_remark',this.AddForm.admin_remark);
					formdata.append('admin_autoaudit',this.AddForm.admin_autoaudit);
					formdata.append('admin_autopublish',this.AddForm.admin_autopublish);
					formdata.append('admin_dpm',this.AddForm.admin_dpm);
					formdata.append('admin_duty',this.AddForm.admin_duty);

					this.$http.post(`${api.dev}/p/main/admin/save`,formdata, {emulateJSON:true}).then(res => {
						loading.close();
						if(res.body.code == 200) {
							this.$message({
								message: res.body.msg,
								type: 'success'
							})
							this.cancleAddForm();
							this.loading = true;
							this.getInfo();
						}else if(res.body.code == 500) {
							this.$message({
								message: res.body.msg,
								type: 'error'
							});
						}else if(res.body.code == 510) {
							this.$message({
								message: res.body.msg,
								type: 'error'
							});
							removeToken();
							setTimeout(function () {
								this.$router.push({path: '/login'})
							},2000)
						}
					})
				}
			})
		},
		/* 编辑提交 */
		submitEditForm(formName) {
		  this.$refs[formName].validate((valid) => {
			  if(valid) {
					// 开启加载器
					const loading = this.$loading({
						lock: true,
						text: '正在保存中...',
						spinner: 'el-icon-loading',
						background: 'rgba(0, 0, 0, 0.7)'
					});
					var formdata = new FormData();
					formdata.append('access_token',getToken());
					formdata.append('username',this.EditForm.username);
					formdata.append('admin_phone',this.EditForm.admin_phone);
					formdata.append('admin_type',parseInt(this.EditForm.admin_type));
					formdata.append('admin_remark',this.EditForm.admin_remark);
					console.log('admin_autoaudit:'+typeof(this.EditForm.admin_autoaudit));
					let admin_autoaudit = this.EditForm.admin_autoaudit == '1' ? true : false;
					formdata.append('admin_autoaudit',admin_autoaudit);
					let admin_autopublish = this.EditForm.admin_autopublish == '1' ? true : false;
					formdata.append('admin_autopublish',admin_autopublish);
					formdata.append('admin_id',parseInt(this.EditForm.admin_id));
					formdata.append('admin_dpm',this.EditForm.admin_dpm);
					formdata.append('admin_duty',this.EditForm.admin_duty);

					this.$http.post(
						`${api.dev}/p/main/admin/update`,
						formdata,
						{emulateJSON:true}
					).then(res => {
						loading.close();
						if(res.body.code == 200) {
							this.cancleEditForm(formName);
							this.$message({
								message: res.body.msg,
								type: 'success'
							});
							this.loading = true;
							this.getInfo();
						}else if(res.body.code == 500) {
							this.$message({
								message: res.body.msg,
								type: 'error'
							});
						}else if(res.body.code == 510) {
							this.$message({
								message: res.body.msg,
								type: 'error'
							});
							removeToken();
							setTimeout(function () {
								this.$router.push({path: '/login'})
							},2000)
						}
					})
			  }else {
				  console.log('error submit');
				  return false;
			  }
		  })
		},
		/* 状态提交 - 表格开关 */
		submitStateForm(row) {
			// 开启加载器
			const loading = this.$loading({
				lock: true,
				text: '正在保存中...',
				spinner: 'el-icon-loading',
				background: 'rgba(0, 0, 0, 0.7)'
			});
			var formdata = new FormData();
			formdata.append('access_token',getToken());
			formdata.append('admin_id',parseInt(row.admin_id));
			this.$http.post(
				`${api.dev}/p/main/admin/setState`,
				formdata,
				{emulateJSON:true}
			).then(res => {
				loading.close();
				if(res.body.code == 200) {
					//this.StateDialogTableVisible = false;
					this.$message({
						message: res.body.msg,
						type: 'success'
					});
				}else if(res.body.code == 500) {
					this.$message({
						message: res.body.msg,
						type: 'error'
					});
				}else if(res.body.code == 510) {
					this.$message({
						message: res.body.msg,
						type: 'error'
					});
					removeToken();
					setTimeout(function () {
						this.$router.push({path: '/login'})
					},2000)
				}
				this.loading = true;
				this.getInfo();
			})
		},
		/* 状态提交 - 右侧按钮 */
		/*submitStateForm(formName) {
			this.$refs[formName].validate((valid) => {
				if(valid) {
					// 开启加载器
					const loading = this.$loading({
						lock: true,
						text: '正在保存中...',
						spinner: 'el-icon-loading',
						background: 'rgba(0, 0, 0, 0.7)'
					});
					var formdata = new FormData();
					formdata.append('access_token',getToken());
					formdata.append('admin_id',parseInt(this.StateForm.admin_id));

					this.$http.post(
						`${api.dev}/p/main/admin/setState`,
						formdata,
						{emulateJSON:true}
					).then(res => {
						loading.close();
						if(res.body.code == 200) {
							this.StateDialogTableVisible = false;
							this.$refs[formName].clearValidate(); // 清除表单验证规则
							this.$message({
								message: res.body.msg,
								type: 'success'
							});
							this.loading = true;
							this.getInfo();
						}else if(res.body.code == 500) {
							this.$message({
								message: res.body.msg,
								type: 'error'
							});
						}else if(res.body.code == 510) {
							this.$message({
								message: res.body.msg,
								type: 'error'
							});
							removeToken();
							setTimeout(function () {
								this.$router.push({path: '/login'})
							},2000)
						}
					})
				}else {
					console.log('error submit');
					return false;
				}
			})
		},*/
		/* 重置密码提交 */
		submitRePswForm(formName) {
		  this.$refs[formName].validate((valid) => {
			  if(valid) {
					// 开启加载器
					const loading = this.$loading({
						lock: true,
						text: '正在保存中...',
						spinner: 'el-icon-loading',
						background: 'rgba(0, 0, 0, 0.7)'
					});
					var formdata = new FormData();
					formdata.append('access_token',getToken());
					formdata.append('admin_id',parseInt(this.RePswForm.admin_id));
					formdata.append('password',this.RePswForm.password);
					//console.log('重置成功');
					//console.log('password:'+this.RePswForm.password);
					//console.log('password2:'+this.RePswForm.rePassword);
					this.$http.post(
						`${api.dev}/p/main/admin/resetPassword`,
						formdata,
						{emulateJSON:true}
					).then(res => {
						loading.close();
						if(res.body.code == 200) {
							this.cancleRePswForm(formName);
							this.$message({
								message: res.body.msg,
								type: 'success'
							});
							this.loading = true;
							this.getInfo();
						}else if(res.body.code == 500) {
							this.$message({
								message: res.body.msg,
								type: 'error'
							});
						}else if(res.body.code == 510) {
							this.$message({
								message: res.body.msg,
								type: 'error'
							});
							removeToken();
							setTimeout(function () {
								this.$router.push({path: '/login'})
							},2000)
						}
					})
			  }else {
				  console.log('error submit');
				  return false;
			  }
		  })
		},
		/* 权限管理提交 */
		submitSetForm(formName) {
			this.$refs[formName].validate((valid) => {
				if(valid) {
					// 开启加载器
					const loading = this.$loading({
						lock: true,
						text: '正在保存中...',
						spinner: 'el-icon-loading',
						background: 'rgba(0, 0, 0, 0.7)'
					});
					var pidArr = this.$refs.permissionsTree.getCheckedKeys();
					var roleArr = this.$refs.roleTree.getCheckedKeys();
					var formdata = new FormData();
					formdata.append('access_token',getToken());
					formdata.append('admin_id',parseInt(this.SetForm.admin_id));
					formdata.append('p_ids', pidArr.join(','));
					formdata.append('role_ids', roleArr.join(','));
					//debugger;
					this.$http.post(
						`${api.dev}/p/main/admin/setPermission`,
						formdata,
						{emulateJSON:true}
					).then(res => {
						loading.close();
						if(res.body.code == 200) {
							this.$message({
								message: res.body.msg,
								type: 'success'
							});
							//this.loading = true;
							//this.getInfo();
						}else if(res.body.code == 500) {
							this.$message({
								message: res.body.msg,
								type: 'error'
							});
						}else if(res.body.code == 510) {
							this.$message({
								message: res.body.msg,
								type: 'error'
							});
							removeToken();
							setTimeout(function () {
								this.$router.push({path: '/login'})
							},2000)
						}
						this.cancleSetForm(formName);
					})
				}else {
					console.log('error submit');
					return false;
				}
			})
		},
		/* 取消新增 */
		cancleAddForm(formName) {
			this.AddDialogTableVisible = false;
			this.$refs[formName].resetFields(); // 清除表单验证规则
			this.dutyList = [];
			this.AddForm.admin_duty = '';
		},
		/* 取消编辑 */
		cancleEditForm(formName) {
			this.typeShow = true;
			this.EditDialogTableVisible = false;
			this.$refs[formName].clearValidate(); // 清除表单验证规则
			this.dutyList = [];
			this.EditForm.admin_duty = '';
		},
		/* 取消状态 */
		/*cancleStateForm(formName) {
			this.StateDialogTableVisible = false;
			this.$refs[formName].clearValidate(); // 清除表单验证规则
		},*/
		/* 取消重置密码 */
		cancleRePswForm(formName) {
			this.currentForm = 'AddForm';
			this.RePswDialogTableVisible = false;
			this.$refs[formName].clearValidate(); // 清除表单验证规则
		},
		/* 取消权限设置 */
		cancleSetForm(formName) {
			this.$refs[formName].clearValidate();  // 清除表单验证规则
			this.permissionsData = [];  // 清除权限树
			this.roleData = [];  // 清除角色树
			this.SetTitle = '权限管理';
			this.$refs.permissionsTree.setCheckedKeys([]);
			this.$refs.roleTree.setCheckedKeys([]);
			this.SetDialogTableVisible = false;
		},
		/* 分页 */
		handleCurrentChange(val) {
			this.loading = true;
			this.start = this.limit * (val - 1);
			this.getInfo();
		}
	},
	created() {
		this.getSubPermission();
		this.getLimit();
		this.getDepartment();
	}
}
</script>


<style lang="stylus" scoped>
#pagination
	margin-top 10px
.tree
	margin 0 12px;
	padding 12px 24px 12px 18px
	border 1px solid #ccc
.margin-bottom-10
	margin-bottom 10px
.padding-left-18
	padding-left 18px
.padding-right-12
	padding-right 12px
.text-align-right
	text-align right
.el-radio+.el-radio
	margin-left 0px
.el-radio
	margin-right 30px
</style>

<style>
.permissionsTree .el-tree-node__content{
	border-bottom: 1px solid #eee;
}
</style>
